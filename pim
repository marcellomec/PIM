import json
import os
import hashlib
from datetime import datetime
import statistics


class SuperEnsino:
    def __init__(self):
        self.usuarios_file = "usuarios.json"
        self.dados_file = "dados_educacionais.json"
        self.carregar_dados()

    def carregar_dados(self):
        if os.path.exists(self.usuarios_file):
            with open(self.usuarios_file, 'r') as f:
                self.usuarios = json.load(f)
        else:
            self.usuarios = {}

        if os.path.exists(self.dados_file):
            with open(self.dados_file, 'r') as f:
                self.dados_educacionais = json.load(f)
        else:
            self.dados_educacionais = {
                "acessos": [],
                "atividades": [],
                "estatisticas": {}
            }

    def salvar_dados(self):
        with open(self.usuarios_file, 'w') as f:
            json.dump(self.usuarios, f, indent=4)

        with open(self.dados_file, 'w') as f:
            json.dump(self.dados_educacionais, f, indent=4)

    def hash_senha(self, senha):
        salt = "superensino2025"
        return hashlib.sha256((senha + salt).encode()).hexdigest()

    def entrada_senha(self, mensagem):
        print("(Atenção: enquanto digita sua senha, ela ficará visível)")
        return input(mensagem)

    def cadastrar_usuario(self):
        print("\n--- CADASTRO NA PLATAFORMA SUPERENSINO ---")
        nome = input("Nome completo: ").strip()
        email = input("E-mail: ").strip().lower()
        idade = input("Idade: ").strip()

        if email in self.usuarios:
            print("Erro: E-mail já cadastrado!")
            return

        senha = self.entrada_senha("Crie uma senha (mínimo 8 caracteres): ")
        while len(senha) < 8:
            print("Senha muito curta! Mínimo 8 caracteres.")
            senha = self.entrada_senha("Crie uma senha: ")

        self.usuarios[email] = {
            "nome": nome,
            "senha_hash": self.hash_senha(senha),
            "idade": idade,
            "data_cadastro": str(datetime.now()),
            "ultimo_acesso": None,
            "nivel_acesso": "aluno"
        }

        self.dados_educacionais["acessos"].append({
            "email": email[:3] + "***@***" + email.split("@")[1][-3:],
            "tipo": "cadastro",
            "data": str(datetime.now())
        })

        self.salvar_dados()
        print("\nCadastro realizado com sucesso! Bem-vindo à plataforma SuperEnsino.")

    def login(self):
        print("\n--- LOGIN SUPERENSINO ---")
        email = input("E-mail: ").strip().lower()
        senha = self.entrada_senha("Senha: ")

        if email not in self.usuarios:
            print("Erro: E-mail não cadastrado!")
            return None

        if self.usuarios[email]["senha_hash"] != self.hash_senha(senha):
            print("Erro: Senha incorreta!")
            return None

        self.usuarios[email]["ultimo_acesso"] = str(datetime.now())
        self.salvar_dados()

        self.dados_educacionais["acessos"].append({
            "email": email[:3] + "***@***" + email.split("@")[1][-3:],
            "tipo": "login",
            "data": str(datetime.now())
        })

        print(f"\nBem-vindo(a), {self.usuarios[email]['nome']}!")
        return email

    def menu_aluno(self, email):
        while True:
            print("\n--- MENU PRINCIPAL SUPERENSINO ---")
            print("1. Acessar conteúdos educacionais")
            print("2. Ver meu progresso")
            print("3. Alterar minha senha")
            print("4. Sair")

            opcao = input("Escolha uma opção: ").strip()

            if opcao == "1":
                self.acessar_conteudos(email)
            elif opcao == "2":
                self.ver_progresso(email)
            elif opcao == "3":
                self.alterar_senha(email)
            elif opcao == "4":
                print("Saindo do sistema...")
                break
            else:
                print("Opção inválida!")

    def acessar_conteudos(self, email):
        print("\n--- CONTEÚDOS EDUCACIONAIS ---")
        print("1. Pensamento Computacional (Iniciante)")
        print("2. Programação Python (Básico)")
        print("3. Segurança Digital (Conceitos Básicos)")
        print("4. Voltar")

        opcao = input("Escolha um conteúdo: ").strip()

        if opcao in ["1", "2", "3"]:
            conteudos = {
                "1": "Pensamento Computacional",
                "2": "Programação Python",
                "3": "Segurança Digital"
            }

            self.dados_educacionais["atividades"].append({
                "email": email[:3] + "***@***" + email.split("@")[1][-3:],
                "conteudo": conteudos[opcao],
                "data": str(datetime.now())
            })

            print(f"\nAcessando conteúdo: {conteudos[opcao]}")
            print("(Conteúdo educativo seria exibido aqui na versão completa)")

            tempo = input("Quanto tempo (em minutos) você estudou este conteúdo? ")
            try:
                tempo = int(tempo)
                self.dados_educacionais["atividades"][-1]["tempo_minutos"] = tempo
                self.salvar_dados()
            except ValueError:
                print("Tempo inválido. Não registrado.")
        elif opcao == "4":
            return
        else:
            print("Opção inválida!")

    def ver_progresso(self, email):
        print("\n--- MEU PROGRESSO ---")

        atividades_usuario = [
            a for a in self.dados_educacionais["atividades"]
            if a["email"] == email[:3] + "***@***" + email.split("@")[1][-3:]
        ]

        if not atividades_usuario:
            print("Você ainda não acessou nenhum conteúdo.")
            return

        tempos = [a.get("tempo_minutos", 0) for a in atividades_usuario]
        total_minutos = sum(tempos)
        media = statistics.mean(tempos) if tempos else 0

        print(f"Total de conteúdos acessados: {len(atividades_usuario)}")
        print(f"Tempo total de estudo: {total_minutos} minutos")
        print(f"Tempo médio por conteúdo: {media:.1f} minutos")

        conteudos_acessados = {a["conteudo"] for a in atividades_usuario}
        todos_conteudos = {"Pensamento Computacional", "Programação Python", "Segurança Digital"}
        sugeridos = todos_conteudos - conteudos_acessados

        if sugeridos:
            print("\nSugerimos que você explore:")
            for conteudo in sugeridos:
                print(f"- {conteudo}")

    def alterar_senha(self, email):
        print("\n--- ALTERAR SENHA ---")
        senha_atual = self.entrada_senha("Digite sua senha atual: ")

        if self.usuarios[email]["senha_hash"] != self.hash_senha(senha_atual):
            print("Erro: Senha atual incorreta!")
            return

        nova_senha = self.entrada_senha("Nova senha (mínimo 8 caracteres): ")
        while len(nova_senha) < 8:
            print("Senha muito curta! Mínimo 8 caracteres.")
            nova_senha = self.entrada_senha("Nova senha: ")

        confirmacao = self.entrada_senha("Confirme a nova senha: ")

        if nova_senha != confirmacao:
            print("Erro: As senhas não coincidem!")
            return

        self.usuarios[email]["senha_hash"] = self.hash_senha(nova_senha)
        self.salvar_dados()
        print("Senha alterada com sucesso!")

    def gerar_estatisticas(self):
        if not self.dados_educacionais["acessos"]:
            print("Nenhum dado disponível para análise.")
            return

        idades = [int(u["idade"]) for u in self.usuarios.values() if u["idade"].isdigit()]

        if idades:
            print("\n--- ESTATÍSTICAS DA PLATAFORMA ---")
            print(f"Total de usuários: {len(self.usuarios)}")
            print(f"Média de idade: {statistics.mean(idades):.1f} anos")
            print(f"Idade mínima: {min(idades)} anos")
            print(f"Idade máxima: {max(idades)} anos")

            print("\nDistribuição de idades:")
            faixas = {
                "0-18": 0,
                "19-30": 0,
                "31-45": 0,
                "46+": 0
            }

            for idade in idades:
                if idade <= 18:
                    faixas["0-18"] += 1
                elif idade <= 30:
                    faixas["19-30"] += 1
                elif idade <= 45:
                    faixas["31-45"] += 1
                else:
                    faixas["46+"] += 1

            for faixa, quantidade in faixas.items():
                print(f"{faixa} anos: {'#' * quantidade} ({quantidade} usuários)")

        if self.dados_educacionais.get("atividades"):
            conteudos = [a["conteudo"] for a in self.dados_educacionais["atividades"]]
            contagem = {c: conteudos.count(c) for c in set(conteudos)}

            print("\nConteúdos mais acessados:")
            for conteudo, qtd in sorted(contagem.items(), key=lambda x: x[1], reverse=True):
                print(f"- {conteudo}: {qtd} acessos")

    def menu_admin(self):
        while True:
            print("\n--- MENU ADMINISTRATIVO ---")
            print("1. Gerar estatísticas da plataforma")
            print("2. Visualizar logs de acesso")
            print("3. Exportar dados anonimizados")
            print("4. Voltar")

            opcao = input("Escolha uma opção: ").strip()

            if opcao == "1":
                self.gerar_estatisticas()
            elif opcao == "2":
                self.visualizar_logs()
            elif opcao == "3":
                self.exportar_dados_anonimizados()
            elif opcao == "4":
                break
            else:
                print("Opção inválida!")

    def visualizar_logs(self):
        print("\n--- LOGS DE ACESSO ---")
        for acesso in self.dados_educacionais["acessos"][-10:]:
            print(f"{acesso['data']} - {acesso['email']} - {acesso['tipo']}")

    def exportar_dados_anonimizados(self):
        dados_anonimos = {
            "total_usuarios": len(self.usuarios),
            "acessos_por_tipo": {},
            "atividades_por_conteudo": {},
            "media_tempo_estudo": 0
        }

        for acesso in self.dados_educacionais["acessos"]:
            tipo = acesso["tipo"]
            dados_anonimos["acessos_por_tipo"][tipo] = dados_anonimos["acessos_por_tipo"].get(tipo, 0) + 1

        tempos = []
        for atividade in self.dados_educacionais.get("atividades", []):
            conteudo = atividade["conteudo"]
            dados_anonimos["atividades_por_conteudo"][conteudo] = dados_anonimos["atividades_por_conteudo"].get(conteudo, 0) + 1
            if "tempo_minutos" in atividade:
                tempos.append(atividade["tempo_minutos"])

        if tempos:
            dados_anonimos["media_tempo_estudo"] = statistics.mean(tempos)

        with open("dados_anonimizados.json", 'w') as f:
            json.dump(dados_anonimos, f, indent=4)

        print("Dados anonimizados exportados para 'dados_anonimizados.json'")


def main():
    plataforma = SuperEnsino()

    while True:
        print("\n=== PLATAFORMA SUPERENSINO ===")
        print("1. Cadastrar novo usuário")
        print("2. Fazer login")
        print("3. Sair")

        opcao = input("Escolha uma opção: ").strip()

        if opcao == "1":
            plataforma.cadastrar_usuario()
        elif opcao == "2":
            email = plataforma.login()
            if email:
                if email == "admin@superensino.com":
                    plataforma.menu_admin()
                else:
                    plataforma.menu_aluno(email)
        elif opcao == "3":
            print("Obrigado por usar a plataforma SuperEnsino!")
            break
        else:
            print("Opção inválida!")


if __name__ == "__main__":
    main()
